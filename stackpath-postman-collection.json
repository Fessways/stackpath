{
	"info": {
		"_postman_id": "518fb8ca-47ae-49c1-9a35-7e499dbba14a",
		"name": "StackPath API",
		"description": "Collection for StackPath's API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ACCOUNTS AND USERS",
			"item": [
				{
					"name": "Accounts",
					"item": [
						{
							"name": "Retrieve a StackPath account",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}"
									]
								},
								"description": "Among other basic account information, this returns the root user id."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ae2faab-98b6-438d-a0e3-c22723e19deb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa7781cc-d566-4365-b847-66c544c69247",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Account Policies",
					"item": [
						{
							"name": "Get the current policy for the given account",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/iam/policy",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"iam",
										"policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set the current policy for the given account",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": \"{{account_id}}\",\n    \"policy\": {\n        \"bindings\": [\n            {\n                \"role\": \"roles/systemOwner\",\n                \"members\": [\n                    \"user:{{user_email}}\"\n                ]\n            }\n        ],\n        \"version\":1\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/iam/policy",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"iam",
										"policy"
									]
								},
								"description": "The policy assigns users to roles, each of which has different permissions. roles/systemOwner has complete permissions, while roles/systemAdmin has access to all stacks, but not account/billing information."
							},
							"response": []
						},
						{
							"name": "Test permissions for the current user on the given account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"permissions\": [\n        \"billing.accountDetails.get\",\n        \"billing.accountDetails.update\",\n        \"billing.accountSubscriptions.get\",\n        \"billing.accounts.create\",\n        \"billing.accounts.get\",\n        \"billing.addresses.validate\",\n        \"billing.cancellationReasons.get\",\n        \"billing.contacts.get\",\n        \"billing.contacts.update\",\n        \"billing.creditCardSignatures.get\",\n        \"billing.invoices.getPdf\",\n        \"billing.invoices.get\",\n        \"billing.invoices.pay\",\n        \"billing.paymentGateways.updateDefault\",\n        \"billing.paymentMethods.createPaypal\",\n        \"billing.paymentMethods.createStripeSetupIntent\",\n        \"billing.paymentMethods.createStripe\",\n        \"billing.paymentMethods.delete\",\n        \"billing.paymentMethods.getPaypal\",\n        \"billing.paymentMethods.get\",\n        \"billing.paymentMethods.updateDefault\",\n        \"billing.paymentMethods.update\",\n        \"billing.products.get\",\n        \"billing.services.get\",\n        \"billing.stackCancellations.get\",\n        \"billing.stackServices.get\",\n        \"billing.subscriptions.cancel\",\n        \"billing.subscriptions.create\",\n        \"billing.subscriptions.get\",\n        \"billing.subscriptions.sync\",\n        \"billing.subscriptions.update\",\n        \"cdn.certificates.setStatus\",\n        \"cdn.certificates.updateHosts\",\n        \"cdn.ips.get\",\n        \"cdn.metrics.get\",\n        \"cdn.origins.scan\",\n        \"cdn.origins.update\",\n        \"cdn.pops.getClosest\",\n        \"cdn.pops.get\",\n        \"cdn.purges.create\",\n        \"cdn.purges.get\",\n        \"cdn.scopeConfigurations.get\",\n        \"cdn.scopeConfigurations.update\",\n        \"cdn.scopeHostnames.create\",\n        \"cdn.scopeHostnames.delete\",\n        \"cdn.scopeHostnames.get\",\n        \"cdn.scopeHostnames.migrate\",\n        \"cdn.scopeRules.create\",\n        \"cdn.scopeRules.delete\",\n        \"cdn.scopeRules.get\",\n        \"cdn.scopeRules.update\",\n        \"cdn.scopes.create\",\n        \"cdn.scopes.delete\",\n        \"cdn.scopes.get\",\n        \"cdn.scripts.create\",\n        \"cdn.scripts.delete\",\n        \"cdn.scripts.get\",\n        \"cdn.scripts.update\",\n        \"delivery.certificateSites.get\",\n        \"delivery.certificates.connectToSite\",\n        \"delivery.certificates.create\",\n        \"delivery.certificates.delete\",\n        \"delivery.certificates.getVerificationDetails\",\n        \"delivery.certificates.get\",\n        \"delivery.certificates.recheck\",\n        \"delivery.certificates.renew\",\n        \"delivery.certificates.request\",\n        \"delivery.certificates.update\",\n        \"delivery.origins.get\",\n        \"delivery.origins.update\",\n        \"delivery.scopeOrigins.connect\",\n        \"delivery.scopeOrigins.disconnect\",\n        \"delivery.scopeOrigins.get\",\n        \"delivery.siteCertificates.get\",\n        \"delivery.siteDeliveryDomains.create\",\n        \"delivery.siteDeliveryDomains.delete\",\n        \"delivery.siteDeliveryDomains.get\",\n        \"delivery.sites.create\",\n        \"delivery.sites.delete\",\n        \"delivery.sites.disableCDN\",\n        \"delivery.sites.disableScripting\",\n        \"delivery.sites.disableWAF\",\n        \"delivery.sites.disable\",\n        \"delivery.sites.enableCDN\",\n        \"delivery.sites.enableScripting\",\n        \"delivery.sites.enableWAF\",\n        \"delivery.sites.enable\",\n        \"delivery.sites.getDNSTargets\",\n        \"delivery.sites.get\",\n        \"delivery.sites.reconcile\",\n        \"delivery.sites.update\",\n        \"dns.metrics.get\",\n        \"dns.zoneRecords.bulkChange\",\n        \"dns.zoneRecords.bulkDelete\",\n        \"dns.zoneRecords.create\",\n        \"dns.zoneRecords.delete\",\n        \"dns.zoneRecords.get\",\n        \"dns.zoneRecords.update\",\n        \"dns.zones.create\",\n        \"dns.zones.delete\",\n        \"dns.zones.disable\",\n        \"dns.zones.enable\",\n        \"dns.zones.get\",\n        \"dns.zones.parseZoneFile\",\n        \"dns.zones.push\",\n        \"dns.zones.scanNameservers\",\n        \"dns.zones.update\",\n        \"identity.accountChildren.create\",\n        \"identity.accountChildren.get\",\n        \"identity.accountLinks.create\",\n        \"identity.accountLinks.get\",\n        \"identity.accountUserApplications.authorize\",\n        \"identity.accountUserApplications.create\",\n        \"identity.accountUserApplications.delete\",\n        \"identity.accountUsers.create\",\n        \"identity.accountUsers.get\",\n        \"identity.accountUsers.unlink\",\n        \"identity.accounts.get\",\n        \"identity.accounts.update\",\n        \"identity.providers.get\",\n        \"ipam.networkPolicies.create\",\n        \"ipam.networkPolicies.delete\",\n        \"ipam.networkPolicies.get\",\n        \"ipam.networkPolicies.update\",\n        \"ipam.networkSubnets.create\",\n        \"ipam.networkSubnets.delete\",\n        \"ipam.networkSubnets.get\",\n        \"ipam.networks.create\",\n        \"ipam.networks.delete\",\n        \"ipam.networks.get\",\n        \"ipam.networks.update\",\n        \"monitoring.alertConditions.batchDelete\",\n        \"monitoring.alertConditions.create\",\n        \"monitoring.alertConditions.delete\",\n        \"monitoring.alertConditions.disable\",\n        \"monitoring.alertConditions.enable\",\n        \"monitoring.alertConditions.get\",\n        \"monitoring.alertConditions.update\",\n        \"monitoring.locations.get\",\n        \"monitoring.monitorChecks.get\",\n        \"monitoring.monitorErrors.get\",\n        \"monitoring.monitorLocations.get\",\n        \"monitoring.monitorMetrics.get\",\n        \"monitoring.monitors.batchDelete\",\n        \"monitoring.monitors.create\",\n        \"monitoring.monitors.delete\",\n        \"monitoring.monitors.disable\",\n        \"monitoring.monitors.enable\",\n        \"monitoring.monitors.get\",\n        \"monitoring.monitors.update\",\n        \"policy.policies.delete\",\n        \"policy.policies.get\",\n        \"policy.policies.put\",\n        \"policy.resources.bind\",\n        \"policy.roles.bind\",\n        \"policy.roles.delete\",\n        \"policy.roles.get\",\n        \"policy.roles.put\",\n        \"policy.tokens.revoke\",\n        \"stack.stacks.create\",\n        \"stack.stacks.get\",\n        \"stack.stacks.shutdown\",\n        \"stack.stacks.update\",\n        \"storage.bucketMetrics.get\",\n        \"storage.buckets.create\",\n        \"storage.buckets.delete\",\n        \"storage.buckets.get\",\n        \"storage.buckets.update\",\n        \"storage.metrics.get\",\n        \"storage.regions.get\",\n        \"storage.userCredentials.delete\",\n        \"storage.userCredentials.generate\",\n        \"storage.userCredentials.get\",\n        \"waf.billableMetrics.get\",\n        \"waf.organizations.get\",\n        \"waf.originHostHeaders.get\",\n        \"waf.originHostHeaders.update\",\n        \"waf.policyGroups.disablePolicy\",\n        \"waf.policyGroups.disable\",\n        \"waf.policyGroups.enablePolicy\",\n        \"waf.policyGroups.enable\",\n        \"waf.policyGroups.getPolicies\",\n        \"waf.policyGroups.get\",\n        \"waf.rules.bulkDelete\",\n        \"waf.rules.create\",\n        \"waf.rules.delete\",\n        \"waf.rules.disable\",\n        \"waf.rules.enable\",\n        \"waf.rules.get\",\n        \"waf.rules.update\",\n        \"waf.siteEvents.getStatistics\",\n        \"waf.siteEvents.get\",\n        \"waf.sites.disableCaching\",\n        \"waf.sites.disableMonitoring\",\n        \"waf.sites.enableCaching\",\n        \"waf.sites.enableMonitoring\",\n        \"waf.sites.getDDOS\",\n        \"waf.sites.updateAPILoginURLs\",\n        \"waf.sites.updateAPIURLs\",\n        \"waf.sites.updateDDOS\",\n        \"waf.sites.updateShieldPOP\",\n        \"waf.traffic.get\",\n        \"workload.instances.getLogs\",\n        \"workload.instances.get\",\n        \"workload.instances.remoteContainerExec\",\n        \"workload.instances.remoteSerialConsole\",\n        \"workload.instances.remoteVNC\",\n        \"workload.instances.watch\",\n        \"workload.locations.get\",\n        \"workload.metrics.get\",\n        \"workload.virtualMachineImages.get\",\n        \"workload.workloads.create\",\n        \"workload.workloads.delete\",\n        \"workload.workloads.get\",\n        \"workload.workloads.update\"\n    ]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/iam/test",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"iam",
										"test"
									]
								},
								"description": "The \"current user\" in this case, is the user whose API credentials are being used."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70112e8e-8d31-42fd-8aaf-cf2ca2c2188d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6c0ebac3-1165-4c64-ac6d-a5259251a9a4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Identity Providers",
					"item": [
						{
							"name": "Retrieve a StackPath account's links to external identity providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76db4577-8de8-4df6-ae8a-2fe2274e0497",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"link_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/links?provider=striketracker&page_request.first=10&page_request.after=-1&page_request.filter=provider=\"striketracker\"&page_request.sort_by=provider",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"links"
									],
									"query": [
										{
											"key": "provider",
											"value": "striketracker",
											"description": "Filters results based on identity provider [stiketracker,  stripe, fireblade, zuora]"
										},
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "The cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "provider=\"striketracker\"",
											"description": "Filter results by key-value pair [id, provider, accountId]"
										},
										{
											"key": "page_request.sort_by",
											"value": "provider",
											"description": "Sort results by key [provider]"
										}
									]
								},
								"description": "This gets account ids for all of the component parts of SP2."
							},
							"response": []
						},
						{
							"name": "Retrieve an individual StackPath account link to an external identity provider",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/links/{{link_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"links",
										"{{link_id}}"
									]
								},
								"description": "This returns the same details that the list of links returns."
							},
							"response": []
						},
						{
							"name": "Retrieve a StackPath account's links to external identity providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1f24787-6f14-477f-9d3f-b759c2424eaf",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"link_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/links?account_id={{account_id}}&provider=striketracker&page_request.first=10&page_request.after=-1&page_request.filter=id={{link_id}}\"&page_request.sort_by=provider",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"links"
									],
									"query": [
										{
											"key": "account_id",
											"value": "{{account_id}}",
											"description": "Account to get the links for (This is a required field which must match the account of the API key)"
										},
										{
											"key": "provider",
											"value": "striketracker",
											"description": "Filters results based on identity provider [stiketracker,  stripe, fireblade, zuora]"
										},
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "The cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "id={{link_id}}\"",
											"description": "Filter results by key-value pair [id, account_id, and provider]"
										},
										{
											"key": "page_request.sort_by",
											"value": "provider",
											"description": "Sorr results by key [provider]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the identity providers available for user authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "439ad0e7-4064-49e8-a4c6-5434529ddb1a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"identity_id\", jsonData.results[2].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/providers?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"providers"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "The cursor value after which data will be returned [-1:]"
										}
									]
								},
								"description": "Identity providers allow users to authenticate to the StackPath customer portal through external systems like Google or Facebook."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0b336e57-4f19-4d43-b6d6-dd343637e83c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b29d0fa6-72a2-49e5-a0d6-990175450def",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Retrieve the users associated with a StackPath account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26aa6bbd-9890-43a0-a824-0c2a68da7c13",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"user_id\", jsonData.results[0].id);",
											"pm.setEnvironmentVariable(\"user_email\", jsonData.results[0].email)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/users?page_request.first=10&page_request.after=-1&page_request.filter=email=\"{{user_email}}\"&page_request.sort_by=name",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"users"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "The cursor position after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "email=\"{{user_email}}\"",
											"description": " Filters results by key-value pair [id, email, status, name, phoneNumber]"
										},
										{
											"key": "page_request.sort_by",
											"value": "name",
											"description": "Sort results by key [id, email, status, identities, accounts, name, phoneNumber]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a user and attach it to the given account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"name\": \"{{user_name}}\",\n    \"phoneNumber\": \"{{user_phone}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/users",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"users"
									]
								},
								"description": "The new user will receive an email to set their password."
							},
							"response": []
						},
						{
							"name": "Unlink a user from its parent account",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"users",
										"{{user_id}}"
									]
								},
								"description": "Note that this does not delete a user entirely, if it is active on multiple accounts."
							},
							"response": []
						},
						{
							"name": "Retrieve a StackPath user account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c625cad5-33b5-4222-81e8-fafe0d348e12",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"user_email\", jsonData.user.email);",
											"pm.setEnvironmentVariable(\"user_name\", jsonData.user.name);",
											"pm.setEnvironmentVariable(\"user_phone\", jsonData.user.phoneNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a user along with its account associations and identities",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}"
									]
								},
								"description": "This will actually remove users entirely."
							},
							"response": []
						},
						{
							"name": "Update a user's non-essential properties (phone number, etc)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"phoneNumber\": \"{{user_phone}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}"
									]
								},
								"description": "This can not be used to update user emails."
							},
							"response": []
						},
						{
							"name": "Retrieve the StackPath accounts that a user belongs to",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98dde627-743d-4dac-9d41-8048ab702101",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"account_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}/accounts?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}",
										"accounts"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "The cursor value after which data will be returned [-1:]"
										}
									]
								},
								"description": "The API key must belong to the user being searched in order to permit the query."
							},
							"response": []
						},
						{
							"name": "Change a user's email address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{new_user_email}}\",\n    \"password\": \"{{user_password}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}/change_email",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}",
										"change_email"
									]
								},
								"description": "This will immediately invalidate any logins or API tokens the user currently has. This will require the login password of the user being updated."
							},
							"response": []
						},
						{
							"name": "Retrieve a user's API credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8162859-3260-490a-9450-157ec3789f57",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"credential_name\", jsonData.results[0].name);",
											"pm.environment.set(\"credential_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}/credentials?page_request.first=10&page_request.after=-1&page_request.filter=name=\"{{credential_name}}\"&page_request.sort_by=name",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}",
										"credentials"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "The cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "name=\"{{credential_name}}\"",
											"description": "Filter results by key-value pair [name]"
										},
										{
											"key": "page_request.sort_by",
											"value": "name",
											"description": "Sort results by key [name]"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ada6b59-203a-44f8-9701-9ac3f8c4873c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9f273b6-120a-4da6-83da-fcfdfcff8f3c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "User Applications",
					"item": [
						{
							"name": "Create a new authorized application for a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"application\": \"test2\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/users/{{user_id}}/applications",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"users",
										"{{user_id}}",
										"applications"
									]
								},
								"description": "Authorized applications can be used to restrict what applications can access user information."
							},
							"response": []
						},
						{
							"name": "Authorize an existing application for a user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/users/{{user_id}}/applications/{{application}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"users",
										"{{user_id}}",
										"applications",
										"{{application}}"
									]
								},
								"description": "Authorized applications can be used to restrict what applications can access user information."
							},
							"response": []
						},
						{
							"name": "Remove an authorized application from a user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/accounts/{{account_id}}/users/{{user_id}}/applications/{{application}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"accounts",
										"{{account_id}}",
										"users",
										"{{user_id}}",
										"applications",
										"{{application}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Generate an OAuth2 access token from API credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b41844fc-f1b4-45f4-a496-e8ab2e2d3fe2",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"{{client_ID}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/oauth2/token",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"oauth2",
										"token"
									]
								},
								"description": "The access token should be used to authorize other StackPath API calls."
							},
							"response": []
						},
						{
							"name": "Create new user API credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a958d8d-0035-422b-a016-c826015ff705",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"client_ID\", jsonData.clientId);",
											"pm.environment.set(\"client_secret\", jsonData.clientSecret);",
											"pm.environment.set(\"crediential_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{credential_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}/credentials",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}",
										"credentials"
									]
								},
								"description": "The client secret is returned only once and is not stored by StackPath. Please take care to save this response."
							},
							"response": []
						},
						{
							"name": "Delete a user's API credential",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}/credentials/{{credential_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}",
										"credentials",
										"{{credential_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate a new API client secret for a user",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}/credentials/{{credential_id}}/rotate",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}",
										"credentials",
										"{{credential_id}}",
										"rotate"
									]
								},
								"description": "The client secret is returned only once and is not stored by StackPath. Please take care to save this response."
							},
							"response": []
						},
						{
							"name": "Change a user identity's password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76d04b5f-fa61-4abb-941b-f8420e9ddd5b",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if (jsonData.success){",
											"    var temp = pm.environment.get(\"new_user_password\");",
											"    pm.environment.set(\"user_password\", temp);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\":\"{{new_user_password}}\",\n\t\"currentPassword\":\"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/identity/v1/users/{{user_id}}/identities/{{identity_id}}/change_password",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"identity",
										"v1",
										"users",
										"{{user_id}}",
										"identities",
										"{{identity_id}}",
										"change_password"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ac7eb75f-43e0-43c4-97eb-93e332a8a466",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c743b70d-c8d0-432f-9eac-72545cfe897a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "STACKS",
			"item": [
				{
					"name": "Stacks",
					"item": [
						{
							"name": "Returns stacks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86dc33c1-1724-4edb-860b-adcceefca48d",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"stack_id\", jsonData.results[0].id);",
											"pm.setEnvironmentVariable(\"account_id\", jsonData.results[0].accountId);",
											"pm.setEnvironmentVariable(\"stack_name\", jsonData.results[0].name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks?page_request.first=10&page_request.after=-1&page_request.filter=name like \"{{stack_name}}\"&page_request.sort_by=name&account_id={{account_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "The cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "name like \"{{stack_name}}\"",
											"description": "Filter results by key-value pair [slug, name, status]"
										},
										{
											"key": "page_request.sort_by",
											"value": "name",
											"description": "Sort results by key [slug, name, status]"
										},
										{
											"key": "account_id",
											"value": "{{account_id}}",
											"description": "ID of account to search"
										}
									]
								}
							},
                            "response": []
						},
						{
							"name": "Creates a stack on an account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2482a67-9c81-41dc-8438-8d195c2aca29",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"stack_id\", jsonData.stack.id);",
											"pm.environment.set(\"stack_name\", jsonData.stack.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": \"{{account_id}}\",\n    \"name\": \"{{new_stack_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Returns a stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "394e87f2-5dad-4847-a0d5-35dc9b1f7758",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"account_id\", jsonData.accountId);",
											"pm.setEnvironmentVariable(\"stack_name\", jsonData.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks/{{stack_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks",
										"{{stack_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updates a stack",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{new_stack_name}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks/{{stack_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks",
										"{{stack_id}}"
									]
								},
								"description": "Changes the name of the stack."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "564f29d1-ff95-4767-8073-c0f92665681e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b15ba0c7-f7cb-401d-829b-faa62712db6d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stack Policies",
					"item": [
						{
							"name": "Get the current policy, if present, for the stack",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks/{{stack_id}}/iam/policy",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks",
										"{{stack_id}}",
										"iam",
										"policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the current policy for the stack",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks/{{stack_id}}/iam/policy",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks",
										"{{stack_id}}",
										"iam",
										"policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set the current policy for the stack",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"policy\":\n\t{\n\t\t\"bindings\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"role\":\"roles/stackAdmin\",\n\t\t\t\t\"members\":\n\t\t\t\t[\n\t\t\t\t\t\"user:{{user_email}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks/{{stack_id}}/iam/policy",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks",
										"{{stack_id}}",
										"iam",
										"policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test which permissions the current user has on the stack",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"permissions\": [\n        \"billing.accountDetails.get\",\n        \"billing.accountDetails.update\",\n        \"billing.accountSubscriptions.get\",\n        \"billing.accounts.create\",\n        \"billing.accounts.get\",\n        \"billing.addresses.validate\",\n        \"billing.cancellationReasons.get\",\n        \"billing.contacts.get\",\n        \"billing.contacts.update\",\n        \"billing.creditCardSignatures.get\",\n        \"billing.invoices.getPdf\",\n        \"billing.invoices.get\",\n        \"billing.invoices.pay\",\n        \"billing.paymentGateways.updateDefault\",\n        \"billing.paymentMethods.createPaypal\",\n        \"billing.paymentMethods.createStripeSetupIntent\",\n        \"billing.paymentMethods.createStripe\",\n        \"billing.paymentMethods.delete\",\n        \"billing.paymentMethods.getPaypal\",\n        \"billing.paymentMethods.get\",\n        \"billing.paymentMethods.updateDefault\",\n        \"billing.paymentMethods.update\",\n        \"billing.products.get\",\n        \"billing.services.get\",\n        \"billing.stackCancellations.get\",\n        \"billing.stackServices.get\",\n        \"billing.subscriptions.cancel\",\n        \"billing.subscriptions.create\",\n        \"billing.subscriptions.get\",\n        \"billing.subscriptions.sync\",\n        \"billing.subscriptions.update\",\n        \"cdn.certificates.setStatus\",\n        \"cdn.certificates.updateHosts\",\n        \"cdn.ips.get\",\n        \"cdn.metrics.get\",\n        \"cdn.origins.scan\",\n        \"cdn.origins.update\",\n        \"cdn.pops.getClosest\",\n        \"cdn.pops.get\",\n        \"cdn.purges.create\",\n        \"cdn.purges.get\",\n        \"cdn.scopeConfigurations.get\",\n        \"cdn.scopeConfigurations.update\",\n        \"cdn.scopeHostnames.create\",\n        \"cdn.scopeHostnames.delete\",\n        \"cdn.scopeHostnames.get\",\n        \"cdn.scopeHostnames.migrate\",\n        \"cdn.scopeRules.create\",\n        \"cdn.scopeRules.delete\",\n        \"cdn.scopeRules.get\",\n        \"cdn.scopeRules.update\",\n        \"cdn.scopes.create\",\n        \"cdn.scopes.delete\",\n        \"cdn.scopes.get\",\n        \"cdn.scripts.create\",\n        \"cdn.scripts.delete\",\n        \"cdn.scripts.get\",\n        \"cdn.scripts.update\",\n        \"delivery.certificateSites.get\",\n        \"delivery.certificates.connectToSite\",\n        \"delivery.certificates.create\",\n        \"delivery.certificates.delete\",\n        \"delivery.certificates.getVerificationDetails\",\n        \"delivery.certificates.get\",\n        \"delivery.certificates.recheck\",\n        \"delivery.certificates.renew\",\n        \"delivery.certificates.request\",\n        \"delivery.certificates.update\",\n        \"delivery.origins.get\",\n        \"delivery.origins.update\",\n        \"delivery.scopeOrigins.connect\",\n        \"delivery.scopeOrigins.disconnect\",\n        \"delivery.scopeOrigins.get\",\n        \"delivery.siteCertificates.get\",\n        \"delivery.siteDeliveryDomains.create\",\n        \"delivery.siteDeliveryDomains.delete\",\n        \"delivery.siteDeliveryDomains.get\",\n        \"delivery.sites.create\",\n        \"delivery.sites.delete\",\n        \"delivery.sites.disableCDN\",\n        \"delivery.sites.disableScripting\",\n        \"delivery.sites.disableWAF\",\n        \"delivery.sites.disable\",\n        \"delivery.sites.enableCDN\",\n        \"delivery.sites.enableScripting\",\n        \"delivery.sites.enableWAF\",\n        \"delivery.sites.enable\",\n        \"delivery.sites.getDNSTargets\",\n        \"delivery.sites.get\",\n        \"delivery.sites.reconcile\",\n        \"delivery.sites.update\",\n        \"dns.metrics.get\",\n        \"dns.zoneRecords.bulkChange\",\n        \"dns.zoneRecords.bulkDelete\",\n        \"dns.zoneRecords.create\",\n        \"dns.zoneRecords.delete\",\n        \"dns.zoneRecords.get\",\n        \"dns.zoneRecords.update\",\n        \"dns.zones.create\",\n        \"dns.zones.delete\",\n        \"dns.zones.disable\",\n        \"dns.zones.enable\",\n        \"dns.zones.get\",\n        \"dns.zones.parseZoneFile\",\n        \"dns.zones.push\",\n        \"dns.zones.scanNameservers\",\n        \"dns.zones.update\",\n        \"identity.accountChildren.create\",\n        \"identity.accountChildren.get\",\n        \"identity.accountLinks.create\",\n        \"identity.accountLinks.get\",\n        \"identity.accountUserApplications.authorize\",\n        \"identity.accountUserApplications.create\",\n        \"identity.accountUserApplications.delete\",\n        \"identity.accountUsers.create\",\n        \"identity.accountUsers.get\",\n        \"identity.accountUsers.unlink\",\n        \"identity.accounts.get\",\n        \"identity.accounts.update\",\n        \"identity.providers.get\",\n        \"ipam.networkPolicies.create\",\n        \"ipam.networkPolicies.delete\",\n        \"ipam.networkPolicies.get\",\n        \"ipam.networkPolicies.update\",\n        \"ipam.networkSubnets.create\",\n        \"ipam.networkSubnets.delete\",\n        \"ipam.networkSubnets.get\",\n        \"ipam.networks.create\",\n        \"ipam.networks.delete\",\n        \"ipam.networks.get\",\n        \"ipam.networks.update\",\n        \"monitoring.alertConditions.batchDelete\",\n        \"monitoring.alertConditions.create\",\n        \"monitoring.alertConditions.delete\",\n        \"monitoring.alertConditions.disable\",\n        \"monitoring.alertConditions.enable\",\n        \"monitoring.alertConditions.get\",\n        \"monitoring.alertConditions.update\",\n        \"monitoring.locations.get\",\n        \"monitoring.monitorChecks.get\",\n        \"monitoring.monitorErrors.get\",\n        \"monitoring.monitorLocations.get\",\n        \"monitoring.monitorMetrics.get\",\n        \"monitoring.monitors.batchDelete\",\n        \"monitoring.monitors.create\",\n        \"monitoring.monitors.delete\",\n        \"monitoring.monitors.disable\",\n        \"monitoring.monitors.enable\",\n        \"monitoring.monitors.get\",\n        \"monitoring.monitors.update\",\n        \"policy.policies.delete\",\n        \"policy.policies.get\",\n        \"policy.policies.put\",\n        \"policy.resources.bind\",\n        \"policy.roles.bind\",\n        \"policy.roles.delete\",\n        \"policy.roles.get\",\n        \"policy.roles.put\",\n        \"policy.tokens.revoke\",\n        \"stack.stacks.create\",\n        \"stack.stacks.get\",\n        \"stack.stacks.shutdown\",\n        \"stack.stacks.update\",\n        \"storage.bucketMetrics.get\",\n        \"storage.buckets.create\",\n        \"storage.buckets.delete\",\n        \"storage.buckets.get\",\n        \"storage.buckets.update\",\n        \"storage.metrics.get\",\n        \"storage.regions.get\",\n        \"storage.userCredentials.delete\",\n        \"storage.userCredentials.generate\",\n        \"storage.userCredentials.get\",\n        \"waf.billableMetrics.get\",\n        \"waf.organizations.get\",\n        \"waf.originHostHeaders.get\",\n        \"waf.originHostHeaders.update\",\n        \"waf.policyGroups.disablePolicy\",\n        \"waf.policyGroups.disable\",\n        \"waf.policyGroups.enablePolicy\",\n        \"waf.policyGroups.enable\",\n        \"waf.policyGroups.getPolicies\",\n        \"waf.policyGroups.get\",\n        \"waf.rules.bulkDelete\",\n        \"waf.rules.create\",\n        \"waf.rules.delete\",\n        \"waf.rules.disable\",\n        \"waf.rules.enable\",\n        \"waf.rules.get\",\n        \"waf.rules.update\",\n        \"waf.siteEvents.getStatistics\",\n        \"waf.siteEvents.get\",\n        \"waf.sites.disableCaching\",\n        \"waf.sites.disableMonitoring\",\n        \"waf.sites.enableCaching\",\n        \"waf.sites.enableMonitoring\",\n        \"waf.sites.getDDOS\",\n        \"waf.sites.updateAPILoginURLs\",\n        \"waf.sites.updateAPIURLs\",\n        \"waf.sites.updateDDOS\",\n        \"waf.sites.updateShieldPOP\",\n        \"waf.traffic.get\",\n        \"workload.instances.getLogs\",\n        \"workload.instances.get\",\n        \"workload.instances.remoteContainerExec\",\n        \"workload.instances.remoteSerialConsole\",\n        \"workload.instances.remoteVNC\",\n        \"workload.instances.watch\",\n        \"workload.locations.get\",\n        \"workload.metrics.get\",\n        \"workload.virtualMachineImages.get\",\n        \"workload.workloads.create\",\n        \"workload.workloads.delete\",\n        \"workload.workloads.get\",\n        \"workload.workloads.update\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/stack/v1/stacks/{{stack_id}}/iam/test",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"stack",
										"v1",
										"stacks",
										"{{stack_id}}",
										"iam",
										"test"
									]
								},
								"description": "This will match the account permissions, unless they have specific additional stack access."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "63d46e96-4cb3-4525-be3a-15e5a23352a9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cf055019-befe-4af4-8250-2812ad3e9e24",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SITES",
			"item": [
				{
					"name": "Delivery",
					"item": [
						{
							"name": "Recheck a certificate's verification details while being issued",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}/recheck",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}",
										"recheck"
									]
								},
								"description": "This will only work for Stackpath free site certificates."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Origins",
					"item": [
						{
							"name": "Retrieve a stack's site origins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "540fa11e-cefd-4b0a-9aba-875a036b2ff6",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"origin_id\", jsonData.results[0].id);",
											"pm.setEnvironmentVariable(\"site_id\", jsonData.results[0].siteId);",
											"pm.setEnvironmentVariable(\"hostname\", jsonData.results[0].http.hostname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Charset",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/origins?page_request.first=10&page_request.after=-1&page_request.filter=hostname=\"{{hostname}}\"&page_request.sort_by=hostname",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"origins"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "hostname=\"{{hostname}}\"",
											"description": "Filter results by key-value pair [hostname]"
										},
										{
											"key": "page_request.sort_by",
											"value": "hostname",
											"description": "Sort results by key [hostname]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an origin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b405ab9a-ff29-4271-a9cc-6cacebc790a6",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"site_id\", jsonData.origin.siteId);",
											"pm.setEnvironmentVariable(\"hostname\", jsonData.origin.http.hostname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/origins/{{origin_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"origins",
										"{{origin_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an origin",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"http\": {\n        \"path\": \"/\",\n        \"hostname\": \"{{new_hostname}}\",\n        \"port\": 80,\n        \"securePort\": 443\n    }\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/origins/{{origin_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"origins",
										"{{origin_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the origins behind a site's scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e734a329-aecf-47f4-b403-2ccd14c0a6c6",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"origin_id\", jsonData.results[0].origin.id);",
											"pm.setEnvironmentVariable(\"hostname\", jsonData.results[0].origin.http.hostname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/origins?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"origins"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Sites",
					"item": [
						{
							"name": "Retrieve all sites in a stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed96f3ab-fffb-4ae2-824d-adfbae6844ea",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"site_id\", jsonData.results[0].id);",
											"pm.setEnvironmentVariable(\"domain_url\", jsonData.results[0].label);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites?page_request.first=10&page_request.after=-1&page_request.filter=label=\"{{domain_url}}\"&page_request.sort_by=label",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "label=\"{{domain_url}}\"",
											"description": "Filter for results [label, status, enabled, scopes.hostnames.domain, site_feature.feature, site_feature.enabled, waf_settings.mode, waf_settings.monitoring, waf_settings.delivery_id]"
										},
										{
											"key": "page_request.sort_by",
											"value": "label",
											"description": "Sort results by key [label, status]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a site",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9f46384-0d11-4246-8663-6f7b93ce47b1",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"site_id\", jsonData.site.id);",
											"pm.environment.set(\"domain_url\", jsonData.site.label);",
											"pm.environment.set(\"hostname\", pm.environment.get(\"new_hostname\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"domain\": \"{{new_domain_url}}\",\n    \"origin\": {\n        \"path\": \"/\",\n        \"hostname\": \"{{new_hosname}}\",\n        \"port\":80,\n        \"securePort\":443,\n        \"hostHeader\":\"{{new_domain_url}}\"\n    },\n    \"features\":[\"CDN\",\"WAF\"]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual site",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a site",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Site Features",
					"item": [
						{
							"name": "Disable a site's CDN service",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/cdn",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"cdn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable a site's CDN service",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/cdn",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"cdn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable a site's serverless scripting service",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripting",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripting"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable a site's serverless scripting service",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripting",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripting"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable a site's WAF service",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/waf",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"waf"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable a site's WAF service",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"apiUrls\":\n\t[\n\t\t\"{{domain_url}}/api\"\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/waf",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"waf"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delivery Domains",
					"item": [
						{
							"name": "Retrieve the delivery domains configured on a site",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "291cfe3e-6f7f-42b8-80bc-b33080880b1b",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"delivery_domain\", jsonData.results[0].domain);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery-domains?page_request.first=10&page_request.after=-1&page_request.filter=domain=\"{{delivery_domain}}\"",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery-domains"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "domain=\"{{delivery_domain}}\"",
											"description": "Filter results by key-value pair [domain]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a delivery domain to a site",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a179d9cb-f170-4c0c-84af-e3856f23f565",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"delivery_domain\", jsonData.domain.domain);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"domain\": \"{{new_delivery_domain}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery_domains",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery_domains"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a delivery domain from a site",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/delivery/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery_domains/{{delivery_domain}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"delivery",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery_domains",
										"{{delivery_domain}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ca78c67e-0cbd-4574-a377-108b85e604ec",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "029d53c3-dc25-4847-93b2-975547350c54",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CONTENT DELIVERY NETWORK",
			"item": [
				{
					"name": "Infrastructure",
					"item": [
						{
							"name": "Retrieve a list of IP addresses used by the StackPath CDN edge network",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/ips?filter=IPV4&response_type=JSON",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"ips"
									],
									"query": [
										{
											"key": "filter",
											"value": "IPV4",
											"description": "[ALL,IPV4,IPV6]"
										},
										{
											"key": "response_type",
											"value": "JSON",
											"description": "[JSON,PLAINTEXT]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a list of all available StackPath CDN points of presence",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/pops",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"pops"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scan a URL from the StackPath edge network and return a performance report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": ""
									},
									{
										"key": "",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/pops/closest?url={{domain_url}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"pops",
										"closest"
									],
									"query": [
										{
											"key": "url",
											"value": "{{domain_url}}",
											"description": "The URL to scan, required"
										},
										{
											"key": "url",
											"value": "10.10.10.10",
											"disabled": true
										}
									]
								},
								"description": "Scan a URL from the StackPath edge network and return a performance report. Results are ordered with the fastest POP response first."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8d8b8faa-b479-42a4-90e0-8d7ec4070e56",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2434d8b-9569-4560-b9bc-a7ed523c61f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scan",
					"item": [
						{
							"name": "Scan an origin from the CDN",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"domain\": \"{{domain_url}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/origins/scan",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"origins",
										"scan"
									]
								},
								"description": "Retrieve information regarding an origin, such as its IP address and whether or not it supports SSL."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "157f8894-bcee-4235-b315-f970f987f1fc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2710d24e-ae37-40c3-b143-ed06707e1d2c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delivery",
					"item": [
						{
							"name": "Retrieve a stack's associated SSL certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12da3837-59b0-4446-8c73-650616f27e85",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates?page_request.first=10&page_request.after=-1&page_request.filter=status=\"ACTIVE\"",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "status=\"ACTIVE\"",
											"description": "Filter for results [status, ssl_manager_certificate_id]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an SSL certificate to a stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01ac69cc-2afd-454c-890e-88c363d9aedf",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.certificate.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"certificate\": \"{{cert}}\",\n    \"key\": \"{{priv_key}}\",\n    \"caBundle\": \"{{ca_bundle}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates"
									]
								},
								"description": "Add an SSL certificate to a stack. The certificate is automatically associated with CDN site scope hostnames that match either the certificate's subject or its alternative names, but can also be manually associated with a site later."
							},
							"response": []
						},
						{
							"name": "Retrieve an individual SSL certificate",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an SSL certificate",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an SSL certificate",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"certificate\": \"{{cert}}\",\n    \"key\": \"{{priv_key}}\",\n    \"caBundle\": \"{{ca_bundle}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Issue a renewal for an SSL certificate",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}/renew",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}",
										"renew"
									]
								},
								"description": "StackPath automatically renews certificates that are 30 days from expiration. Call this to retry a renewal that previously failed."
							},
							"response": []
						},
						{
							"name": "Retrieve the CDN sites associated with an SSL certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b68a1c97-4dc2-46ea-8926-91ac377bb77a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"site_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}/sites?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}",
										"sites"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a CDN site's SSL certificate manual verification details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}/verification_details",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}",
										"verification_details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a site's SSL certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9821cc4-ca68-4838-ae00-cdccefc00ee2",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.results[0].certificate.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/certificates?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"certificates"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request an SSL certificate for a CDN site",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hosts\": [\n        \"{{domain_url}}\",\n        \"www.{{domain_url}}\"\n    ],\n    \"verificationMethod\": \"DNS\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/certificates/request",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"certificates",
										"request"
									]
								},
								"description": "The optional list of hosts should be delivery domains for the site. If no hosts parameter is provided, all delivery domains for a site will be included in the SAN field. If the hosts parameter is provided, then the first entry in the list will be used as the certificate's common name."
							},
							"response": []
						},
						{
							"name": "Associate a CDN site with an SSL certificate",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"certificates",
										"{{certificate_id}}"
									]
								},
								"description": "Association is performed without validating if the site has a hostname covered by the certificate. This is useful for preparation work required for getting a site ready for traffic. If a certificate is uploaded which contains hostnames for sites, it will automatically be connected to those sites. If a hostname is added to a site which is covered by an SSL certificate, it will automatically be connected to the certificate."
							},
							"response": []
						},
						{
							"name": "Update an SSL certificate's hosts",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hosts\": [\n        \"{{domain_url}}\",\n        \"api.{{domain_url}}\",\n        \"www.{{domain_url}}\"\n    ]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/certificates/{{certificate_id}}/hosts",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"certificates",
										"{{certificate_id}}",
										"hosts"
									]
								},
								"description": "Updating hosts issues a new certificate. If all of the hosts are under the same apex, this does not require re-validation."
							},
							"response": []
						},
						{
							"name": "Retrieve a CDN site's DNS CNAME targets",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/dns/targets",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"dns",
										"targets"
									]
								},
								"description": "A site's hostname should point to these CNAME targets in order for traffic to be sent through StackPath's edge nodes."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5127d940-61df-45be-b296-4e27f00af1c2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c10a8327-8467-4feb-9de7-e595bb4e244e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Metrics",
					"item": [
						{
							"name": "Retrieve request metrics for all CDN sites in a stack",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/metrics?granularity=AUTO&platforms={{billing_platform}}&group_by=NONE&site_type_filter=CDN",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"metrics"
									],
									"query": [
										{
											"key": "granularity",
											"value": "AUTO",
											"description": "[AUTO, P1M, PT5M, PT1H, P1D]"
										},
										{
											"key": "platforms",
											"value": "{{billing_platform}}"
										},
										{
											"key": "group_by",
											"value": "NONE",
											"description": "[NONE, ACCOUNT, SITE, PLATFORM, POP, REGION]"
										},
										{
											"key": "site_type_filter",
											"value": "CDN",
											"description": "[ALL, CDN, WAF, API, EDGE_ENGINE, SERVERLESS_EDGE_ENGINE]"
										}
									]
								},
								"description": "If the start and end dates are not provided, the last 24 hours of data will be returned."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "155d124d-7c56-487c-8c7f-7288b9bdf86a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "009678a4-b11b-4e83-8c00-47925848007f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Purge Content",
					"item": [
						{
							"name": "Purge cached content for all CDN sites on a stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93abe37c-6a4d-4544-93c8-510463a4040d",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"purge_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"items\": [\n        {\n            \"url\": \"https://{{domain_url}}/wp-content\",\n            \"recursive\": true\n        },\n        {\n            \"url\": \"https://{{domain_url}}/test0.css\",\n            \"recursive\": false,\n            \"purgeAllDynamic\": true\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/purge",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"purge"
									]
								},
								"description": "Content is re-cached on the CDN the next time it is requested. Use the returned purge ID to see the status of a purge request."
							},
							"response": []
						},
						{
							"name": "Get purge status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/purge/{{purge_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"purge",
										"{{purge_id}}"
									]
								},
								"description": "Retrieve a purge request's status"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Retrieve a CDN site's scopes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f622df58-bb6c-4803-bc60-d888625fcdbe",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"for (var entry of jsonData.results){",
											"    if (entry.platform == \"CDS\" && entry.path == \"/\") {",
											"        pm.setEnvironmentVariable(\"scope_id\", entry.id);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new CDN site scope",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"path\": \"/\",\n    \"platform\": \"CDS\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a CDN site scope",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a CDN site's scope configuration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/configuration",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a CDN site's scope configuration",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"configuration\": {\n        \"clientRequestModification\": [\n            {\n                \"urlPattern\": \"regex:(^https://{{domain_url}}/?$)\",\n                \"urlRewrite\": \"%client.request.protocol%://%client.request.host%/index.html\",\n                \"flowControl\": \"break\",\n                \"enabled\": true,\n                \"methodFilter\": \"GET\",\n                \"clientRequestFilter\": []\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/configuration",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the hostnames configured on a CDN site's scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fa9343c-b180-4dae-96b8-4d075bce1111",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"delivery_domain\", jsonData.results[0].domain);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/hostnames?page_request.first=10&page_request.after=-1&page_request.filter=domain=\"{{domain_url}}\"",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"hostnames"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "domain=\"{{domain_url}}\"",
											"description": "Filter results by key-value pair [domain]"
										}
									]
								},
								"description": "Hostnames allow the CDN to recognize an HTTP request and associate it with a CDN site."
							},
							"response": []
						},
						{
							"name": "Add a hostname to a CDN site's scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88ead8cb-8de9-4b30-9ecd-3892cdc3c7c5",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"delivery_domain\", jsonData.hostname.domain);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"domain\": \"*.{{domain_url}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/hostnames",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"hostnames"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a hostname from a CDN site's scope",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/hostnames/{{delivery_domain}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"hostnames",
										"{{delivery_domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the origins behind a CDN site's scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91ea673e-0046-4b37-92f4-5e71c52e1fc9",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"origin_id\", jsonData.results[0].origin.id);",
											"pm.setEnvironmentVariable(\"hostname\", jsonData.results[0].origin.hostname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/origins?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"origins"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Connect an origin to a CDN site's scope",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": {\n    \t\"path\":\"/\",\n        \"hostname\": \"{{hostname}}\",\n        \"port\":80,\n        \"securePort\":443\n    },\n    \"priority\": 1,\n    \"originId\": \"{{origin_id}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/origins",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"origins"
									]
								},
								"description": "The origin is automatically created if necessary. When the request contains a priority which an origin already associated with the scope has set, the existing origin is disconnected. The priority of an origin already associated with a scope can be modified via this endpoint."
							},
							"response": []
						},
						{
							"name": "Disconnect an origin from CDN site's scope",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/origins/{{origin_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"origins",
										"{{origin_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EdgeRules",
					"item": [
						{
							"name": "Retrieve all EdgeRules on a CDN site scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f22ba5fd-5b2d-4393-bb76-68ead4106684",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"rule_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/rules?page_request.first=10&page_request.after=-1&page_request.filter=name=\"Force HTTPS\"&page_request.sort_by=slug",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"rules"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "name=\"Force HTTPS\"",
											"description": "Filter results by key-value pair [name, slug]"
										},
										{
											"key": "page_request.sort_by",
											"value": "slug",
											"description": "Sort results by key [name, slug]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an EdgeRule on a CDN site scope",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Force HTTPS\",\n    \"slug\": \"force-https\",\n    \"configuration\": {\n        \"dynamicCacheRule\": [\n            {\n                \"statusCode\": 301,\n                \"headers\": \"Location: https://%client.request.host%%client.request.fullfilepath%%client.request.params%\",\n                \"enabled\": true,\n                \"pathFilter\": \"http://*\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/rules",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual EdgeRule from a CDN site scope",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"rules",
										"{{rule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an EdgeRule",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/rules/{{rule_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"rules",
										"{{rule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an EdgeRule's configuration",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/rules/{{rule_id}}/configuration",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"rules",
										"{{rule_id}}",
										"configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an EdgeRule's configuration",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept-Encoding",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Force HTTPS\",\n\t\"slug\": \"force-https\",\n    \"configuration\": {\n        \"dynamicCacheRule\": [\n            {\n                \"statusCode\": 301,\n                \"headers\": \"Location: https://%client.request.host%%client.request.fullfilepath%%client.request.params%\",\n                \"enabled\": true,\n                \"pathFilter\": \"http://*\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scopes/{{scope_id}}/rules/{{rule_id}}/configuration",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scopes",
										"{{scope_id}}",
										"rules",
										"{{rule_id}}",
										"configuration"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Serverless Scripting",
					"item": [
						{
							"name": "Get all serverless scripts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c025e09-39bd-4de9-b464-64939060d3dc",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"script_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripts?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripts"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "name=\"test\"",
											"description": "Filter results by key-value pair [stackId, siteId, name]",
											"disabled": true
										},
										{
											"key": "page_request.sort_by",
											"value": "name",
											"description": "Sort results by key [stackId, siteId, name]",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a serverless script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdfc53ae-7898-490f-88ee-5963d85935a3",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"script_id\", jsonData.script.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab30aac9-a5c3-4be3-be75-eb062a844f05",
										"exec": [
											"var temp_code = btoa(pm.environment.get(\"code\").replace(/(\\r\\n|\\n|\\r)/gm,\" \"));",
											"console.log(temp_code);",
											"pm.environment.set(\"code\", temp_code);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test\",\n\t\"code\": \"{{code}}\",\n\t\"paths\":\n\t[\n\t\t\"index.html\"\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripts",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripts"
									]
								},
                                "description": "The script code is just javascript, encoded in base64. The included pre-request script handles encoding."
							},
							"response": []
						},
						{
							"name": "Get a serverless script",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripts/{{script_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripts",
										"{{script_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a serverless script",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripts/{{script_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripts",
										"{{script_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a serverless script",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"paths\":\n\t[\n\t\t\"test/index.html\"\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripts/{{script_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripts",
										"{{script_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a version of a serverless script",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/cdn/v1/stacks/{{stack_id}}/sites/{{site_id}}/scripts/{{script_id}}/{{script_version}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"cdn",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"scripts",
										"{{script_id}}",
										"{{script_version}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "162c08d1-e42c-4461-8850-691b7a1caac4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c6aa2c43-bdcb-486f-b85f-9c227c27f58c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WAF",
			"item": [
				{
					"name": "Infrastructure",
					"item": [
						{
							"name": "Get WHOIS organizations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/organizations?page_request.first=10&page_request.after=0&page_request.filter=name like \"TV *\"",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"organizations"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "0",
											"description": "Cursor value after which data will be returned [0:]"
										},
										{
											"key": "page_request.filter",
											"value": "name like \"TV *\"",
											"description": "Filter results by key-value pairs [name]"
										}
									]
								},
								"description": "StackPath regularly searches IP address space for organizations to allow or block in custom rules."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delivery",
					"item": [
						{
							"name": "Retrieve a stack's associated SSL certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb506b0c-6b23-4b66-97e0-1c50a9029144",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/delivery/certificates?page_request.first=10&page_request.after=-1&page_request.filter=status=\"ACTIVE\"",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"delivery",
										"certificates"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "status=\"ACTIVE\"",
											"description": "Filter results by key-value pair [ssl_manager_certificate_id, status]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an SSL certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f099d2d-fd1a-48ac-914b-4271fa610b80",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.certificate.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"certificate\": \"{{cert}}\",\n\t\"key\": \"{{priv_key}}\",\n\t\"caBundle\": \"{{ca_bundle}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/delivery/certificates",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"delivery",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual SSL certificate",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/delivery/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"delivery",
										"certificates",
										"{{certificate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an SSL certificate",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/delivery/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"delivery",
										"certificates",
										"{{certificate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an SSL certificate",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"certificate\": \"{{cert}}\",\n\t\"key\": \"{{priv_key}}\",\n\t\"caBundle\": \"{{ca_bundle}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/delivery/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"delivery",
										"certificates",
										"{{certificate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Issue a renewal for an SSL certificate",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/delivery/certificates/{{certificate_id}}/renew",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"delivery",
										"certificates",
										"{{certificate_id}}",
										"renew"
									]
								},
								"description": "StackPath automatically renews certificates that are 30 days from expiration. Call this to retry a renewal that previously failed."
							},
							"response": []
						},
						{
							"name": "Retrieve a WAF site's SSL certificate manual verification details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/delivery/certificates/{{certificate_id}}/verification_details",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"delivery",
										"certificates",
										"{{certificate_id}}",
										"verification_details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable CDN caching on a WAF site",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery/caching/disable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery",
										"caching",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable CDN caching on a WAF site",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery/caching/enable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery",
										"caching",
										"enable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a site's SSL certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9c1c21b-ec2f-4675-a15b-f3b35e4c4d0d",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.results[0].certificate.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery/certificates?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery",
										"certificates"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request an SSL certificate for a WAF site",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe7ccf67-484b-4de4-854c-2d8536c931e4",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.certificate.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"hosts\":\n\t[\n\t\t\"{{domain_url}}\",\n\t\t\"www.{{domain_url}}\"\n\t],\n\t\"verificationMethod\":\"DNS\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery/certificates/request",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery",
										"certificates",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate a WAF site with an SSL certificate",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery",
										"certificates",
										"{{certificate_id}}"
									]
								},
								"description": "Association is performed without validating if the site has a hostname covered by the certificate. This is useful for preparation work required for getting a site ready for traffic. If a certificate is uploaded which contains hostnames for sites, it will automatically be connected to those sites. If a hostname is added to a site which is covered by an SSL certificate, it will automatically be connected to the certificate."
							},
							"response": []
						},
						{
							"name": "Retrieve a WAF site's DNS CNAME targets",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/delivery/dns/targets",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"delivery",
										"dns",
										"targets"
									]
								},
								"description": "A site's hostname should point to these CNAME targets in order for traffic to be sent through StackPath's edge nodes."
							},
							"response": []
						},
						{
							"name": "Retrieve a WAF site's Host header value",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/origin/host_header",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"origin",
										"host_header"
									]
								},
								"description": "This value is sent in a Host header by the WAF to the site's origin."
							},
							"response": []
						},
						{
							"name": "Update a WAF site's Host header value",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"hostHeader\":\"{{domain_url}}\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/origin/host_header",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"origin",
										"host_header"
									]
								},
								"description": "This value is sent in a Host header by the WAF to the site's origin."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "WAF Features",
					"item": [
						{
							"name": "Update an API site's login URLs",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"apiLoginUrls\":\n\t[\n\t\t\"api.{{domain_url}}/login\"\n\t]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/api_login_urls",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"api_login_urls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a WAF site's API URLs",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"apiUrls\":\n\t[\n\t\t\"api.{{domain_url}}\"\n\t]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/api_urls",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"api_urls"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a WAF site's DDOS protection settings",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/ddos",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"ddos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a WAF site's DDOS protection settings",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"globalThreshold\": \"5000\",\n    \"burstThreshold\": \"1000\",\n    \"subSecondBurstThreshold\": \"50\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/ddos",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"ddos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a WAF site from monitoring mode",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/monitoring",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"monitoring"
									]
								},
								"description": "Restore a WAF site's original enabled or disabled state."
							},
							"response": []
						},
						{
							"name": "Place a WAF site into monitoring mode",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/monitoring",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"monitoring"
									]
								},
								"description": "WAF sites in monitoring mode accept incoming requests and log but take no action on policy and rule violations. Sites must be enabled for monitoring mode to apply. Otherwise, monitoring mode will take effect the next time the site is enabled."
							},
							"response": []
						},
						{
							"name": "Update a WAF site's shield POPs",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"shieldPopCodes\":\n\t[\n\t\t\"DC1\",\n\t\t\"NY2\"\n\t]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/shield_pops",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"shield_pops"
									]
								},
								"description": "Shield POPs are only applicable to API type sites"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Events",
					"item": [
						{
							"name": "Retrieve a WAF site's event statistics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/event_stats?filter.action_value=BLOCK_ACTION&filter.result_value=BLOCKED_RESULT&filter.reference_id={{reference_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"event_stats"
									],
									"query": [
										{
											"key": "filter.action_value",
											"value": "BLOCK_ACTION",
											"description": "[ANY_ACTION, BLOCK_ACTION, ALLOW_ACTION, CAPTCHA_ACTION, HANDSHAKE_ACTION, MONITOR_ACTION]"
										},
										{
											"key": "filter.result_value",
											"value": "BLOCKED_RESULT",
											"description": "[ANY_ACTION, BLOCKED_RESULT]"
										},
										{
											"key": "filter.reference_id",
											"value": "{{reference_id}}",
											"description": "Filter by event reference id"
										}
									]
								},
								"description": "Event statistics collect the total number of and number of blocked events for a site over a given time frame. Statistics are collected per country of origin, the rules that triggered events, the requesting organization as dertermined by WHOIS lookup against the client IP address, and by actions taken by the WAF as a result of the event."
							},
							"response": []
						},
						{
							"name": "Search for a site's WAF events",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03da0a62-626c-4387-ab09-0931b135a0cc",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"event_id\", jsonData.results[0].id);",
											"pm.setEnvironmentVariable(\"reference_id\", jsonData.results[0].referenceId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/events?page_request.first=100&page_request.after=0&filter.reference_id={{reference_id}}&filter.action_value=HANDSHAKE_ACTION&filter.result_value=ANY_RESULT",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"events"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "100",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "0",
											"description": "Cursor value after which data will be returned [0:]"
										},
										{
											"key": "filter.reference_id",
											"value": "{{reference_id}}"
										},
										{
											"key": "filter.action_value",
											"value": "HANDSHAKE_ACTION",
											"description": "[ANY_ACTION, BLOCK_ACTION, ALLOW_ACTION, CAPTCHA_ACTION, HANDSHAKE_ACTION, MONITOR_ACTION]"
										},
										{
											"key": "filter.result_value",
											"value": "ANY_RESULT",
											"description": "[ANY_RESULT, BLOCKED_RESULT]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual WAF event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bdae1d0-7e57-4934-8a43-5e230fd2269f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"reference_id\", jsonData.event.referenceId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/events/{{event_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Policies",
					"item": [
						{
							"name": "Retrieve all WAF policy groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bba528e-3d62-4833-8ba7-89449f65d95d",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"policy_group_id\", jsonData.policyGroups[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual WAF policy group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups/{{policy_group_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups",
										"{{policy_group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable all policies in a WAF policy group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups/{{policy_group_id}}/disable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups",
										"{{policy_group_id}}",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable all policies in a WAF policy group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups/{{policy_group_id}}/enable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups",
										"{{policy_group_id}}",
										"enable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve all policies in a WAF policy group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b13da402-c4cf-4149-97c3-6609f1964932",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"policy_id\", jsonData.policies[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups/{{policy_group_id}}/policies",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups",
										"{{policy_group_id}}",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual WAF policy",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups/{{policy_group_id}}/policies/{{policy_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups",
										"{{policy_group_id}}",
										"policies",
										"{{policy_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable a WAF policy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups/{{policy_group_id}}/policies/{{policy_id}}/disable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups",
										"{{policy_group_id}}",
										"policies",
										"{{policy_id}}",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable a WAF policy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/policy_groups/{{policy_group_id}}/policies/{{policy_id}}/enable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"policy_groups",
										"{{policy_group_id}}",
										"policies",
										"{{policy_id}}",
										"enable"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Rules",
					"item": [
						{
							"name": "Retrieve a site's WAF rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "941660cb-7c46-4c2b-adf0-84a185da4171",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"waf_rule_id\", jsonData.rules[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules?page_request.first=10&page_request.after=0&page_request.filter=name=\"test\"&page_request.sort_by=name",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "0",
											"description": "Cursor value after which data will be returned [0:]"
										},
										{
											"key": "page_request.filter",
											"value": "name=\"test\"",
											"description": "Filter results by [name, action]"
										},
										{
											"key": "page_request.sort_by",
											"value": "name",
											"description": "Sort results by [name, action, enabled, actionDuration]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a WAF rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b12db5c-e2f4-46c6-8b7c-536e34675f31",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"waf_rule_id\", jsonData.rule.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test1\",\n    \"conditions\": [\n        {\n            \"httpMethod\": {\n                \"httpMethod\": \"GET\"\n            },\n            \"country\": {\n                \"countryCode\": \"AF\"\n            }\n        }\n    ],\n    \"action\": \"BLOCK\",\n    \"statusCode\": \"TOO_MANY_REQUESTS_429\",\n    \"enabled\": true\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete multiple WAF rules",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ruleIds\":\n\t[\n\t\t\"{{waf_rule_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules/bulk_delete",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules",
										"bulk_delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual WAF rule",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules/{{waf_rule_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules",
										"{{waf_rule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a WAF rule",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules/{{waf_rule_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules",
										"{{waf_rule_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a WAF rule",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \t\"enabled\": false,\n    \"statusCode\": \"FORBIDDEN_403\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules/{{waf_rule_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules",
										"{{waf_rule_id}}"
									]
								},
								"description": "Only properties present in the request will be updated."
							},
							"response": []
						},
						{
							"name": "Disable a WAF rule",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules/{{waf_rule_id}}/disable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules",
										"{{waf_rule_id}}",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable a WAF rule",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/sites/{{site_id}}/rules/{{waf_rule_id}}/enable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"sites",
										"{{site_id}}",
										"rules",
										"{{waf_rule_id}}",
										"enable"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Traffic",
					"item": [
						{
							"name": "Retrieve a report of stack's WAF traffic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/waf/v1/stacks/{{stack_id}}/traffic",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"waf",
										"v1",
										"stacks",
										"{{stack_id}}",
										"traffic"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f92b41b7-e214-43a3-9bc8-ca90ac7de2f2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d7e1815e-45a2-45c9-8af7-1a7de12f43eb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DNS",
			"item": [
				{
					"name": "Scanning",
					"item": [
						{
							"name": "Scan a domain name for information about its provider",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/discovery/{{delivery_domain}}/provider_details",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"discovery",
										"{{delivery_domain}}",
										"provider_details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scan a domain name for its resource records",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/discovery/{{domain_url}}/records",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"discovery",
										"{{domain_url}}",
										"records"
									]
								},
								"description": "Please note, this call returns the records that StackPath was able to scan at the time of execution. It performs a best effort, but cannot guarantee all resource records were found."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Metrics",
					"item": [
						{
							"name": "Retrieve DNS metrics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/metrics?start_date=2019-12-26T00:00:00Z&end_date=2019-12-27T00:00:00Z&type=ZONE_QUERY_COUNT",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"metrics"
									],
									"query": [
										{
											"key": "start_date",
											"value": "2019-12-26T00:00:00Z",
											"description": "Must be in the format yyyy-mm-ddT00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-12-27T00:00:00Z",
											"description": "Must be in the format yyyy-mm-ddT00:00:00Z"
										},
										{
											"key": "type",
											"value": "ZONE_QUERY_COUNT"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Zones",
					"item": [
						{
							"name": "Retrieve all DNS zones on a stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfdd2f4-bb6d-44c2-9ad2-227905f6dc16",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"account_id\", jsonData.zones[0].accountId);",
											"pm.setEnvironmentVariable(\"zone_id\", jsonData.zones[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones?page_request.first=10&page_request.after=-1&page_request.filter=domain=\"{{domain_url}}\"&page_request.sort_by=domain",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "domain=\"{{domain_url}}\"",
											"description": "Filter results by key-value pair [domain, status, disabled]"
										},
										{
											"key": "page_request.sort_by",
											"value": "domain",
											"description": "Sort results by key [domain]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new DNS zone",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stackId\": \"{{stack_id}}\",\n    \"domain\": \"{{domain_url}}\",\n    \"useApexDomain\": true\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual DNS zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa15dab5-c501-4145-bc1c-f13c63bc5def",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"account_id\", jsonData.zone.accountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a DNS zone",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a DNS zone",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"labels\":\n\t{\n\t\t\"testKey\":\"testValue\"\n\t}\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable a DNS zone",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/disable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve information about a DNS zone's authoritative nameservers",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/discover_nameservers",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"discover_nameservers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable a DNS zone",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/enable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"enable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Parse a bind file for its records",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"zoneFile\":\"Base64 zone file\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/parse",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"parse"
									]
								},
								"description": "Given the zone file contents a list of records will be returned. SOA records are not imported at this time. If Nameserver records are found at the root they will not be imported, StackPath nameserver records will be automatically provided with the zone."
							},
							"response": []
						},
						{
							"name": "Publish a zone to StackPath's DNS infrastructure",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/repush",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"repush"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Resource Records",
					"item": [
						{
							"name": "Create or update multiple DNS zone resource records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57751bd0-ff8d-4c3f-a5dd-0520d3db8296",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"zone_record_id\", jsonData.zoneRecordIds[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"records\": [\n        {\n            \"name\": \"{{domain_url}}\",\n            \"type\": \"TXT\",\n            \"ttl\": \"30\",\n            \"data\": \"test_record\",\n            \"id\": \"{{zone_record_id}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/bulk/records",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"bulk",
										"records"
									]
								},
								"description": "Existing resource records are updated while new records are created"
							},
							"response": []
						},
						{
							"name": "Delete multiple DNS zone resource records",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"zoneRecordIds\":\n\t[\n\t\t\"{{zone_record_id}}\"\n\t]\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/bulk/records/delete",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"bulk",
										"records",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a DNS zone's resource record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebfe6b00-6ef0-4577-869c-82cf9a20764c",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"zone_record_id\", jsonData.records[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/records?page_request.first=10&page_request.after=-1&page_request.filter=name=\"@\"",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"records"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "name=\"@\"",
											"description": "Filter results by key-value pair [name, type]"
										},
										{
											"key": "page_request.sort_by",
											"value": "name",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new resource record in a DNS zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc35e6f1-0a45-44a6-9a07-9af30ae6ec69",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"zone_record_id\", jsonData.record.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"@\",\n    \"type\": \"TXT\",\n    \"ttl\": \"30\",\n    \"data\": \"test_record 3126589\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/records",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual DNS zone resource record",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/records/{{zone_record_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"records",
										"{{zone_record_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a DNS zone resource record",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/records/{{zone_record_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"records",
										"{{zone_record_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace a DNS zone resource record",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{domain_url}}\",\n    \"type\": \"TXT\",\n    \"ttl\": \"30\",\n    \"data\": \"test_record1\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/records/{{zone_record_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"records",
										"{{zone_record_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update specific fields in a DNS zone resource record",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"test_record2\"\n}"
								},
								"url": {
									"raw": "https://gateway.stackpath.com/dns/v1/stacks/{{stack_id}}/zones/{{zone_id}}/records/{{zone_record_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"dns",
										"v1",
										"stacks",
										"{{stack_id}}",
										"zones",
										"{{zone_id}}",
										"records",
										"{{zone_record_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "45400d0f-74a3-4524-9bef-03cf942fbac4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3620dd65-1c00-40a0-a41e-9924e9e6ba26",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EDGE COMPUTE",
			"item": [
				{
					"name": "Workloads",
					"item": [
						{
							"name": "Retrieve the locations a workload may be created in",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/locations?",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"locations"
									],
									"query": []
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a stack's workloads",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b93a2a86-be01-4566-b991-fdaca73e7d8f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"workload_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/workloads?page_request.first=10&page_request.after=-1&page_request.filter=name=\"test\"&page_request.sort_by=id",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"workloads"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "name=\"test\"",
											"description": "Filter results by key-value pair [id, name, slug, status]"
										},
										{
											"key": "page_request.sort_by",
											"value": "id",
											"description": "Sort results by key [id, name, slug, status]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new workload",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workload\": {\n        \"stackId\": \"{{stack_id}}\",\n        \"name\": \"sampleWorkload\",\n        \"metadata\": {\n            \"annotations\": {\n                \"workload.platform.stackpath.net/ssh-public-keys\": \"{{ssh_key}}\"\n            }\n        },\n        \"spec\": {\n            \"virtualMachines\": {\n                \"sampleMachine\": {\n                    \"image\": \"stackpath-edge/centos-7:v20190315058\",\n                    \"ports\": {\n                        \"ssh\": {\n                            \"protocol\": \"TCP\",\n                            \"port\": 22\n                        }\n                    },\n                    \"resources\": {\n                        \"requests\": {\n                            \"cpu\": \"1\",\n                            \"memory\": \"2Gi\"\n                        }\n                    }\n                }\n            }\n        },\n        \"targets\": {\n            \"dallas\": {\n                \"spec\": {\n                    \"deploymentScope\": \"cityCode\",\n                    \"deployments\": {\n                        \"minReplicas\": 1,\n                        \"selectors\": [\n                            {\n                                \"operator\": \"in\",\n                                \"values\": [\n                                    \"DFW\"\n                                ],\n                                \"key\": \"cityCode\"\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/workloads",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"workloads"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an individual workload",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/workloads/{{workload_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"workloads",
										"{{workload_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a workload",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/workloads/{{workload_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"workloads",
										"{{workload_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a workload",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workload\": {\n        \"stackId\": \"{{stack_id}}\",\n        \"id\": \"{{workload_id}}\",\n        \"name\": \"sampleWorkload\",\n        \"metadata\": {\n            \"annotations\": {\n                \"workload.platform.stackpath.net/ssh-public-keys\": \"{{ssh_key}}\"\n            }\n        },\n        \"spec\": {\n            \"virtualMachines\": {\n                \"sampleMachine\": {\n                    \"image\": \"stackpath-edge/centos-7:v20190315058\",\n                    \"ports\": {\n                        \"ssh\": {\n                            \"protocol\": \"TCP\",\n                            \"port\": 22\n                        }\n                    },\n                    \"resources\": {\n                        \"requests\": {\n                            \"cpu\": \"1\",\n                            \"memory\": \"2Gi\"\n                        }\n                    }\n                }\n            }\n        },\n        \"targets\": {\n            \"dallas\": {\n                \"spec\": {\n                    \"deploymentScope\": \"cityCode\",\n                    \"deployments\": {\n                        \"minReplicas\": 1,\n                        \"selectors\": [\n                            {\n                                \"operator\": \"in\",\n                                \"values\": [\n                                    \"DFW\"\n                                ],\n                                \"key\": \"cityCode\"\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/workloads/{{workload_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"workloads",
										"{{workload_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Metrics",
					"item": [
						{
							"name": "Retrieve usage metrics for all workloads in a stack, a specific workload, or a specific instance in a workload",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/metrics?workload_id={{workload_id}}&type=BANDWIDTH&granularity=DEFAULT&start_date=2019-10-30T00:00:00Z&end_date=2019-11-10T00:00:00Z",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"metrics"
									],
									"query": [
										{
											"key": "workload_id",
											"value": "{{workload_id}}"
										},
										{
											"key": "type",
											"value": "BANDWIDTH"
										},
										{
											"key": "granularity",
											"value": "DEFAULT"
										},
										{
											"key": "start_date",
											"value": "2019-10-30T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-11-10T00:00:00Z"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Instances",
					"item": [
						{
							"name": "Retrieve a workload's instances",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/workloads/{{workload_id}}/instances?",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"workloads",
										"{{workload_id}}",
										"instances"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Not tested",
											"disabled": true
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Not tested",
											"disabled": true
										},
										{
											"key": "page_request.filter",
											"value": "test=\"test\"",
											"description": "Not tested",
											"disabled": true
										},
										{
											"key": "page_request.sort_by",
											"value": "test",
											"description": "Not tested",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Instance Logs",
					"item": [
						{
							"name": "Retrieve a stream of an instance's logs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/workload/v1/stacks/{{stack_id}}/workloads/{{workload_id}}/instances/{{instance_name}}/logs",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"workload",
										"v1",
										"stacks",
										"{{stack_id}}",
										"workloads",
										"{{workload_id}}",
										"instances",
										"{{instance_name}}",
										"logs"
									]
								},
								"description": "Retrieve a stream of logs generated by a workload instance's containers. Logs are generated by the container themselves and are not modified by StackPath. Log contents vary by the application running in the container, though many containerized applications are configured to log to STDOUT and STDERR."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2d98e45a-a138-4097-a729-3580e819b1db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e9aa86a1-e538-433d-b018-d246ee76561b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EDGE COMPUTE NETWORKING",
			"item": [
				{
					"name": "Network Policies",
					"item": [
						{
							"name": "Get a list of network policies by stack id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fae2eb8b-a5af-4253-b6bc-4aaa60952d2b",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"network_policy_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/ipam/v1/stacks/{{stack_id}}/network_policies?page_request.first=10&page_request.after=-1&page_request.filter=name=\"test\"&page_request.sort_by=name",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ipam",
										"v1",
										"stacks",
										"{{stack_id}}",
										"network_policies"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "name=\"test\"",
											"description": "Filter results by key-value pair [name, slug]"
										},
										{
											"key": "page_request.sort_by",
											"value": "name",
											"description": "Sort results by key [name, slug]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new network policy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"networkPolicy\":\n\t{\n\t\t\"stackId\":\"{{stack_id}}\",\n\t\t\"name\":\"workloadPolicy\",\n\t\t\"description\":\"This is a sample workload policy\",\n\t\t\"spec\":\n\t\t{\n\t\t\t\"policyTypes\":\n\t\t\t[\n\t\t\t\t\"INGRESS\"\n\t\t\t],\n\t\t\t\"priority\":10,\n\t\t\t\"ingress\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"action\":\"BLOCK\",\n\t\t\t\t\t\"from\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ipBlock\":\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"cidr\":\"0.0.0.0/0\",\n\t\t\t\t\t\t\t\t\"except\":\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"127.0.0.0/8\",\n\t\t\t\t\t\t\t\t\t\"192.0.0.0/8\",\n\t\t\t\t\t\t\t\t\t\"151.139.0.0/16\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/ipam/v1/stacks/{{stack_id}}/network_policies",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ipam",
										"v1",
										"stacks",
										"{{stack_id}}",
										"network_policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a network policy",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/ipam/v1/stacks/{{stack_id}}/network_policies/{{network_policy_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ipam",
										"v1",
										"stacks",
										"{{stack_id}}",
										"network_policies",
										"{{network_policy_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a network policy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/ipam/v1/stacks/{{stack_id}}/network_policies/{{network_policy_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ipam",
										"v1",
										"stacks",
										"{{stack_id}}",
										"network_policies",
										"{{network_policy_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a network policy",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"networkPolicy\":\n\t{\n\t\t\"stackId\":\"{{stack_id}}\",\n\t\t\"id\":\"{{network_policy_id}}\",\n\t\t\"name\":\"workloadPolicy\",\n\t\t\"description\":\"This is a sample workload policy\",\n\t\t\"spec\":\n\t\t{\n\t\t\t\"policyTypes\":\n\t\t\t[\n\t\t\t\t\"INGRESS\"\n\t\t\t],\n\t\t\t\"ingress\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"action\":\"BLOCK\",\n\t\t\t\t\t\"from\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ipBlock\":\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"cidr\":\"0.0.0.0/0\",\n\t\t\t\t\t\t\t\t\"except\":\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"127.0.0.0/8\",\n\t\t\t\t\t\t\t\t\t\"192.0.0.0/8\",\n\t\t\t\t\t\t\t\t\t\"151.139.0.0/16\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/ipam/v1/stacks/{{stack_id}}/network_policies/{{network_policy_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ipam",
										"v1",
										"stacks",
										"{{stack_id}}",
										"network_policies",
										"{{network_policy_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ef451751-2e32-423b-8d3e-bcc8157b038b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "13efee87-1add-4c97-aaad-824aefd35406",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SSL",
			"item": [
				{
					"name": "Certificates",
					"item": [
						{
							"name": "Get list of certificates on a stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "434bd91e-8c48-4e44-9c26-9a650efe8cef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"certificate_id\", jsonData.results[jsonData.results.length - 1].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/ssl/v1/stacks/{{stack_id}}/certificates?page_request.first=10&page_request.after=-1&page_request.filter=issuer=\"Sectigo Limited\"&page_request.sort_by=expires_at",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ssl",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "issuer=\"Sectigo Limited\"",
											"description": "Filter results by [issuer, status, expires_at]"
										},
										{
											"key": "page_request.sort_by",
											"value": "expires_at",
											"description": "Sort results by [issuer, status, expires_at]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a certificate by the certificate id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/ssl/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ssl",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete from the database",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/ssl/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}?",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ssl",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}"
									],
									"query": [
										{
											"key": "reason",
											"value": "expired",
											"description": "The reason for removing the certificate from the database",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a certificate",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"commonName\": \"{{domain_url}}\",\n\t\"hosts\":\n\t[\n\t\t\"{{domain_url}}\",\n\t\t\"www.{{domain_url}}\"\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/ssl/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ssl",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}"
									]
								},
								"description": "Doing this will create a new CSR and issue a new certificate"
							},
							"response": []
						},
						{
							"name": "Get the latest certificate for a given certificate ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42edc5a7-481e-4f9b-8e98-9a00b154501d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/ssl/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}/latest",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ssl",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}",
										"latest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Place a renewal request for a certificate to the ssl provider",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/ssl/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}/renew",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ssl",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}",
										"renew"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke the certificate from the ssl provider and delete the database record",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/ssl/v1/stacks/{{stack_id}}/certificates/{{certificate_id}}/revoke",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"ssl",
										"v1",
										"stacks",
										"{{stack_id}}",
										"certificates",
										"{{certificate_id}}",
										"revoke"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "02b31e30-25b0-4a03-8ac7-be59028f8d53",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa535dae-1c8f-48a5-8cad-632438d1d261",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "MONITORING",
			"item": [
				{
					"name": "HTTP Monitoring",
					"item": [
						{
							"name": "Get all HTTP monitors",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f384e4a1-7371-4f32-a34a-c32efb5d13fc",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"monitor_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors?page_request.first=10&page_request.after=-1",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an HTTP monitor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45f96e3d-7bca-400c-9461-3b56748dc52d",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"monitor_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Monitor Test\",\n\t\"url\": \"https://{{domain_url}}\",\n\t\"method\": \"GET\",\n\t\"timeout\": 5,\n\t\"ipVersion\": \"IPV4\",\n\t\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all HTTP monitors",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"monitorIds\": \n\t[\n\t\t\"{{monitor_id}}\"\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/bulk_delete",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"bulk_delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an HTTP monitor",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an HTTP monitor",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace an HTTP monitor",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Monitor Test\",\n\t\"url\": \"https://{{domain_url}}\",\n\t\"method\": \"GET\",\n\t\"timeout\": 5,\n\t\"ipVersion\": \"IPV4\",\n\t\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an HTTP monitor",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Monitor Test\",\n\t\"url\": \"https://{{domain_url}}\",\n\t\"method\": \"GET\",\n\t\"timeout\": 5,\n\t\"ipVersion\": \"IPV4\",\n\t\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HTTP monitoring errors",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/errors",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"errors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HTTP monitoring locations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/locations",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HTTP monitoring metrics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/metrics",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"metrics"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HTTP Monitoring Checks",
					"item": [
						{
							"name": "Get all HTTP monitoring checks",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks?",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Not tested",
											"disabled": true
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Not tested",
											"disabled": true
										},
										{
											"key": "page_request.filter",
											"value": "test=\"test\"",
											"description": "Not tested",
											"disabled": true
										},
										{
											"key": "page_request.sort_by",
											"value": "test",
											"description": "Not tested",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an HTTP monitoring check",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"monitorKind\": \"HTTP\",\n\t\"metric\": \"STATUS\",\n\t\"comparator\": \"EQ\",\n\t\"value\": \"down\", \n\t\"alarmDelay\": 60,\n\t\"alarmEvery\": 300,\n\t\"alarmUntilSilenced\": false,\n\t\"enabled\": true,\n\t\"minimumLocations\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all HTTP monitoring checks",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"checkIds\":\"{{check_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks/bulk_delete",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks",
										"bulk_delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an HTTP monitoring check",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks/{{check_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks",
										"{{check_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an HTTP monitoring check",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks/{{check_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks",
										"{{check_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an HTTP monitoring check",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"metric\": \"CODE\",\n\t\"comparator\": \"NEQ\",\n\t\"value\": \"200\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks/{{check_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks",
										"{{check_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable an HTTP monitoring check",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks/{{check_id}}/disable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks",
										"{{check_id}}",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable an HTTP monitoring check",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/http_monitors/{{monitor_id}}/checks/{{check_id}}/enable",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"http_monitors",
										"{{monitor_id}}",
										"checks",
										"{{check_id}}",
										"enable"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Infrastructure",
					"item": [
						{
							"name": "Get monitor locations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/monitoring/v1/stacks/{{stack_id}}/locations",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"monitoring",
										"v1",
										"stacks",
										"{{stack_id}}",
										"locations"
									]
								},
								"description": "Get monitoring locations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "77c97b10-7df9-4d89-9ae4-2613477e45db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5fcf02cf-9063-47dc-b5d6-dbc08b71ef1e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "OBJECT STORAGE",
			"item": [
				{
					"name": "Buckets",
					"item": [
						{
							"name": "Retrieve all buckets in the storage provider for a given stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85c1aff0-0b8a-4be0-b287-fc54b6b95cb2",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.setEnvironmentVariable(\"bucket_id\", jsonData.results[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/buckets?page_request.first=10&page_request.after=-1&page_request.filter=region = \"us-east-2\"&page_request.sort_by=label",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"buckets"
									],
									"query": [
										{
											"key": "page_request.first",
											"value": "10",
											"description": "Number of results to return [1:100]"
										},
										{
											"key": "page_request.after",
											"value": "-1",
											"description": "Cursor value after which data will be returned [-1:]"
										},
										{
											"key": "page_request.filter",
											"value": "region = \"us-east-2\"",
											"description": "Filter results by key-value pair [stack_id, label, region] only exact matches (allows 'like' for label)"
										},
										{
											"key": "page_request.sort_by",
											"value": "label",
											"description": "Sort results by key [label]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a bucket under a stack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c829deb4-ce2c-4b10-ac37-86d0a2725835",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"bucket_id\", jsonData.bucket.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"{{new_bucket_name}}\",\n\t\"region\": \"us-east-2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/buckets",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"buckets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a bucket in the storage provider for a given stack",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/buckets/{{bucket_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"buckets",
										"{{bucket_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a given bucket",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/buckets/{{bucket_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"buckets",
										"{{bucket_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updates the name of a bucket",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"visibility\": \"PUBLIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/buckets/{{bucket_id}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"buckets",
										"{{bucket_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Metrics",
					"item": [
						{
							"name": "Get all daily utilizations for all buckets on a stack",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/metrics?start_time=2019-12-24T00:00:00Z&end_time=2019-12-25T00:00:00Z",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"metrics"
									],
									"query": [
										{
											"key": "start_time",
											"value": "2019-12-24T00:00:00Z",
											"description": "Must be in the format yyyy-mm-ddT00:00:00Z"
										},
										{
											"key": "end_time",
											"value": "2019-12-25T00:00:00Z",
											"description": "Must be in the format yyyy-mm-ddT00:00:00Z"
										}
									]
								},
								"description": "When the start & end dates are not provided, the metrics for the last day will be returned.\nThe date range used must be at least a day apart, and only beginning times are allowed (e.g. 2019-01-01T00:00:00)"
							},
							"response": []
						},
						{
							"name": "Get all daily utilizations for specific bucket",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/buckets/{{bucket_id}}/metrics?start_time=2019-12-24T00:00:00Z&end_time=2019-12-25T00:00:00Z",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"buckets",
										"{{bucket_id}}",
										"metrics"
									],
									"query": [
										{
											"key": "start_time",
											"value": "2019-12-24T00:00:00Z",
											"description": "Must be in the format yyyy-mm-ddT00:00:00Z"
										},
										{
											"key": "end_time",
											"value": "2019-12-25T00:00:00Z",
											"description": "Must be in the format yyyy-mm-ddT00:00:00Z"
										}
									]
								},
								"description": "When the start & end dates are not provided, the metrics for the last day will be returned.\nThe date range used must be at least a day apart, and only beginning times are allowed (e.g. 2019-01-01T00:00:00)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "User Credentials",
					"item": [
						{
							"name": "Get credentials for a given user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7b3d193-ccc3-4621-be8e-65e2fa95f98d",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"access_key\", jsonData.credentials[0].accessKey);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/users/{{user_id}}/credentials",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"users",
										"{{user_id}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate storage credentials for the given user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce85f4e6-a04f-4115-ba8e-7f55b9280374",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"access_key\", jsonData.accessKey);",
											"pm.environment.set(\"secret_key\", jsonData.secretKey);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/users/{{user_id}}/credentials/generate",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"users",
										"{{user_id}}",
										"credentials",
										"generate"
									]
								},
								"description": "Users can only have one set of credentials, so calling this method will generate a new set and invalidate any existing ones."
							},
							"response": []
						},
						{
							"name": "Delete provided storage access credentials for the given user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://gateway.stackpath.com/storage/v1/stacks/{{stack_id}}/users/{{user_id}}/credentials/{{access_key}}",
									"protocol": "https",
									"host": [
										"gateway",
										"stackpath",
										"com"
									],
									"path": [
										"storage",
										"v1",
										"stacks",
										"{{stack_id}}",
										"users",
										"{{user_id}}",
										"credentials",
										"{{access_key}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3c8386c2-e41c-48c2-b540-ff6401acc589",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "676d00e7-c4af-4dd6-9882-a8ccab012f4a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Get Oauth Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b41844fc-f1b4-45f4-a496-e8ab2e2d3fe2",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"{{client_ID}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}"
				},
				"url": {
					"raw": "https://gateway.stackpath.com/identity/v1/oauth2/token",
					"protocol": "https",
					"host": [
						"gateway",
						"stackpath",
						"com"
					],
					"path": [
						"identity",
						"v1",
						"oauth2",
						"token"
					]
				},
				"description": "OAuth token generation"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "57af49a8-6a73-4146-a538-abf91c2fe03b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "074c03a6-d12f-473f-ae65-e2fe4ae9fc1b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
